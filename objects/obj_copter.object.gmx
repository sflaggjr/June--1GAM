<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_copter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing = idle;
vspd = 0;
hspd = 0;
movespeed = 10;
load = 0;
max_load = 5;
var snd = audio_play_sound(snd_copter, 10, true);
audio_sound_gain(snd, 0.1, 0);
playerid = id;
fuel = 100;
max_fuel = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_copter</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Handling
//Capture Input
key_left = -keyboard_check(vk_left);
key_right = keyboard_check(vk_right);
key_up = -keyboard_check(vk_up);
key_down = keyboard_check(vk_down);
//Reacting to Input from player
hmove = key_left + key_right;
vmove = key_up + key_down;

hspd = hmove * movespeed;
vspd = vmove * movespeed;
//Horizontal Collision
if (place_meeting(x+hspd, y, obj_building))
    {
        while(!place_meeting(x+sign(hspd), y, obj_building))
            {
                x += sign(hspd);
            }
        hspd = 0;
    }
//Vertical Collision
if (place_meeting(x, y+vspd, obj_building))
    {
        while(!place_meeting(x, y+sign(vspd), obj_building))
            {
                y += sign(vspd);
            }
        vspd = 0;
    }
if (hmove = -1)
    {
        facing = facing_left;
    }
if (hmove = 1)
    {
        facing = facing_right;
    }
if (hmove = 0)
    {
        facing = idle;
    }
    //Dropping off the Injured
if (place_meeting(x+hspd, y, obj_hospital))
    {
        while(!place_meeting(x+sign(hspd), y, obj_hospital))
            {
                x += sign(hspd);                
            }
        hspd = 0;
        load_score = 10 * load;
        score += load_score;
        audio_play_sound(snd_deposit, 20, false);
        load = 0;
        
    }
if (place_meeting(x, y+vspd, obj_hospital))
    {
        while(!place_meeting(x, y+sign(vspd), obj_hospital))
            {
                y += sign(vspd);                
            }
        vspd = 0;
        load_score = 10 * load;
        score += load_score;       
        load = 0;
        audio_play_sound(snd_deposit, 20, false);
    }

x += hspd;
y += vspd;
//Picking up the Injured
if (load &lt; max_load)
    {
        if (place_meeting(x, y, obj_injured))
            {
                load += 1
                with instance_nearest(x, y, obj_injured)
                    {
                        audio_play_sound(snd_collect, 15, false);
                        instance_destroy();
                    }
            }          
    }
//Refueling
if (place_meeting(x + hspd, y, obj_fuelstation)) ||(place_meeting(x, y + vspd, obj_fuelstation))
    {   
        if (fuel &lt; max_fuel)
            {
                fuel += 1;
            }
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_injured">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (load = max_load)
    {   
        audio_play_sound(snd_nopickup, 15, false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if facing = facing_right
    {
        image_angle = -15;
    }
if facing = idle
    {
        image_angle = 0;
    }
if facing = facing_left
    {
        image_angle = 15;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
